Git 比SVN 強太多了[GIT 基本語法介紹/查詢]
資料來源:https://mp.weixin.qq.com/s/4KEN9licUWdmd7fgx1XHaQ

基本語法文字收藏:
    Git-SVN常用命令
        # 下载一个 SVN 项目和它的整个代码历史，并初始化为 Git 代码库
        $ git svn clone -s [repository]

        # 查看当前版本库情况
        $ git svn info

        # 取回远程仓库所有分支的变化
        $ git svn fetch

        # 取回远程仓库当前分支的变化，并与本地分支变基合并
        $ git svn rebase 

        # 上传当前分支的本地仓库到远程仓库
        $ git svn dcommit

        # 拉取新分支，并提交到远程仓库
        $ svn copy [remote_branch] [new_remote_branch] -m [message]

        # 创建远程分支对应的本地分支
        $ git checkout -b [local_branch] [remote_branch]

        
    初始化
        # 在当前目录新建一个Git代码库
        $ git init

        # 下载一个项目和它的整个代码历史 [Git only]
        $ git clone [url]

        
    配置
        # 列举所有配置
        $ git config -l

        # 为命令配置别名
        $ git config --global alias.co checkout
        $ git config --global alias.ci commit
        $ git config --global alias.st status
        $ git config --global alias.br branch

        # 设置提交代码时的用户信息
        $ git config [--global] user.name "[name]"
        $ git config [--global] user.email "[email address]"


    增刪文件
        # 添加当前目录的所有文件到暂存区
        $ git add .

        # 添加指定文件到暂存区
        $ git add <file1> <file2> ...

        # 添加指定目录到暂存区，包括其子目录
        $ git add <dir>

        # 删除工作区文件，并且将这次删除放入暂存区
        $ git rm [file1] [file2] ...

        # 停止追踪指定文件，但该文件会保留在工作区
        $ git rm --cached [file]

        # 改名文件，并且将这个改名放入暂存区
        $ git mv [file-original] [file-renamed]    


    分支
        # 列出所有本地分支
        $ git branch

        # 列出所有本地分支和远程分支
        $ git branch -a

        # 新建一个分支，但依然停留在当前分支
        $ git branch [branch-name]

        # 新建一个分支，并切换到该分支
        $ git checkout -b [new_branch] [remote-branch]

        # 切换到指定分支，并更新工作区
        $ git checkout [branch-name]

        # 合并指定分支到当前分支
        $ git merge [branch]

        # 选择一个 commit，合并进当前分支
        $ git cherry-pick [commit]

        # 删除本地分支，-D 参数强制删除分支
        $ git branch -d [branch-name]

        # 删除远程分支
        $ git push [remote] :[remote-branch]
        
        
    提交
        # 提交暂存区到仓库区
        $ git commit -m [message]

        # 提交工作区与暂存区的变化直接到仓库区
        $ git commit -a

        # 提交时显示所有 diff 信息
        $ git commit -v

        # 提交暂存区修改到仓库区，合并到上次修改，并修改上次的提交信息
        $ git commit --amend -m [message]

        # 上传本地指定分支到远程仓库
        $ git push [remote] [remote-branch]
        拉取
        # 下载远程仓库的所有变动 (Git only)
        $ git fetch [remote]

        # 显示所有远程仓库 (Git only)
        $ git remote -v

        # 显示某个远程仓库的信息 (Git only)
        $ git remote show [remote]

        # 增加一个新的远程仓库，并命名 (Git only)
        $ git remote add [remote-name] [url]

        # 取回远程仓库的变化，并与本地分支合并，(Git only), 若使用 Git-SVN，请查看第三节
        $ git pull [remote] [branch]

        # 取回远程仓库的变化，并与本地分支变基合并，(Git only), 若使用 Git-SVN，请查看第三节
        $ git pull --rebase [remote] [branch]
        
        
    撤銷
        # 恢复暂存区的指定文件到工作区
        $ git checkout [file]

        # 恢复暂存区当前目录的所有文件到工作区
        $ git checkout .

        # 恢复工作区到指定 commit
        $ git checkout [commit]

        # 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变
        $ git reset [file]

        # 重置暂存区与工作区，与上一次 commit 保持一致
        $ git reset --hard

        # 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变
        $ git reset [commit]

        # 重置当前分支的HEAD为指定 commit，同时重置暂存区和工作区，与指定 commit 一致
        $ git reset --hard [commit]

        # 新建一个 commit，用于撤销指定 commit
        $ git revert [commit]

        # 将未提交的变化放在储藏区
        $ git stash

        # 将储藏区的内容恢复到当前工作区
        $ git stash pop
        
        
    查詢
        # 查看工作区文件修改状态
        $ git status               

        # 查看工作区文件修改具体内容   
        $ git diff [file]

        # 查看暂存区文件修改内容
        $ git diff --cached [file] 

        # 查看版本库修改记录
        $ git log                  

        # 查看某人提交记录
        $ git log --author=someone 

        # 查看某个文件的历史具体修改内容
        $ git log -p [file]        

        # 查看某次提交具体修改内容
        $ git show [commit]        